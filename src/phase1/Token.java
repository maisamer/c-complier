package phase1;
import java.util.LinkedHashMap;
import java.util.Map;

 
public class Token {
	public Map<String,String> IntializeMap(){
		   Map<String,String> map=new LinkedHashMap<String,String>();
		   map.put("auto", "AUTO");
		   map.put("string", "string");
		   map.put("new", "NEW");
		   map.put("true","TRUE");
		   map.put("false","FALSE");
		   map.put("break" ,"BREAK");
		   map.put("bool","BOOL");
		   map.put("case" ,"CASE"); 
		   map.put("static" ,"STATIC");
		   map.put("const","CONST");
		   map.put("continue","CONTINUE"); 
		   map.put("float" ,"FLOAT");
		   map.put("char","char");
		   map.put("default" ,"DEFAULT"); 
		   map.put("do"  ,"DO");
		   map.put("double","DOUBLE");
		   map.put("else","ELSE");
		   map.put("enum","ENUM");
		   map.put("extern","EXTERN");
		   map.put("float","FLOAT");
		   map.put("for"  ,"FOR");
		   map.put("goto","GOTO");
		   map.put("if","IF");
		   map.put("int","INT"); 
		   map.put("long", "LONG");
		   map.put("register","REGISTER");
		   map.put("return","RETURN");
		   map.put("short","SHORT");
		   map.put("signed","SIGNED");
		   map.put("sizeof" ,"SIZEOF");
		   map.put("struct", "STRUCT");
		   map.put("switch","SWITCH");
		   map.put("typedef","TYPEDEF");
		   map.put("union", "UNION");
		   map.put("unsigned", "UNSIGNED");
		   map.put("void","VOID");
		   map.put("volatile","VOLATILE");
		   map.put("while","WHILE");
		   map.put("[0-9]\\d*\\.[0-9]\\d*","FLOAT_LITERAL");
		   map.put("[0-9]\\d*","INTEGRAL_LITERAL");		   
		   map.put("\"[^\"]+\"","STRING_LITERAL");
		   map.put("\'.?\'","CHAR_LITERAL");
		   map.put("\\{" ,"LEFT_CURLY_B");
		   map.put("\\}","RIGHT_CURLY_B");
		   map.put("\\["," LEFT_SQUARE_B");
		   map.put("\\]" ,"RIGHT_SQUARE_B");
		   map.put("\\(","LEFT_ROUND_B");
		   map.put("\\)" ,"RIGHT_ROUND_B");
		   map.put(",","COMMA");
		   map.put(";","SEMICOLON ");
		   map.put("!","NOT");
		   map.put("\\.","DOT");
		   map.put("=", "ASSIGN_OPERATOR");
		   map.put("#","PREPROCESSOR");
		   map.put("==","EQUAL");
		   map.put("true","BOOL_LIT");
		   map.put("false","BOOL_LIT");
		   map.put("&&","AND");
		   map.put("\\+","PLUS");
		   map.put("-","MINUS");
		   map.put("\\*","ASTERICK");
		   map.put("\\/","DIVIDE");
		   map.put("%", "MOD");
		   map.put(">","GREATERTHAN");
		   map.put("<","LESSTHAN");
		   map.put("<=", "LESS_EQ");
		   map.put(">=", "GREAT_EQ");	   
		   map.put("!=","NOT_EQUAL");
		   map.put("\\|\\|" ,"OR");	   
		   map.put("&","BITWISE_AND");
		   map.put("\\|","BITWISE_OR");		  
		   map.put("\\^","BITWISE_XOR");
		   map.put(">>","LEFT_SHIFT");
		   map.put(">>","RIGHT_SHIFT");
		   map.put("~","BITWISE_NOT");	
		   map.put("//.*" ,"SINGLE_COMMENT");
		   map.put("(/\\*.*?\\*/)","MULTI_COMMENT");
		   map.put("[^0-9][0-9A-Za-z_]*" ,"ID");
	   return map;
	   }
}
