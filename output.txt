< INT >  :  int
< ID >  :  computeFac
< LEFT_ROUND_B >  :  (
< INT >  :  int
< ID >  :  num
< RIGHT_ROUND_B >  :  )
< LEFT_CURLY_B >  :  {
< INT >  :  int
< ID >  :  factorial
< SEMICOLON  >  :  ;
< ID >  :  factorial
< ASSIGN_OPERATOR >  :  =
< INTEGRAL_LITERAL >  :  1
< SEMICOLON  >  :  ;
< IF >  :  if
< LEFT_ROUND_B >  :  (
< ID >  :  num
< LESSTHAN >  :  <
< INTEGRAL_LITERAL >  :  0
< RIGHT_ROUND_B >  :  )
< RETURN >  :  return
< ID >  :  factorial
< SEMICOLON  >  :  ;
< ELSE >  :  else
< LEFT_CURLY_B >  :  {
< INT >  :  int
< ID >  :  i
< SEMICOLON  >  :  ;
< ID >  :  i
< ASSIGN_OPERATOR >  :  =
< INTEGRAL_LITERAL >  :  1
< SEMICOLON  >  :  ;
< WHILE >  :  while
< LEFT_ROUND_B >  :  (
< ID >  :  i
< LESS_EQ >  :  <=
< ID >  :  num
< RIGHT_ROUND_B >  :  )
< LEFT_CURLY_B >  :  {
< ID >  :  factorial
< ASSIGN_OPERATOR >  :  =
< ID >  :  factorial
< PLUS >  :  +
< ID >  :  i
< SEMICOLON  >  :  ;
< ID >  :  i
< ASSIGN_OPERATOR >  :  =
< ID >  :  i
< PLUS >  :  +
< INTEGRAL_LITERAL >  :  1
< SEMICOLON  >  :  ;
< RIGHT_CURLY_B >  :  }
< RIGHT_CURLY_B >  :  }
< RETURN >  :  return
< ID >  :  factorial
< SEMICOLON  >  :  ;
< RIGHT_CURLY_B >  :  }
